// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.14.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `handwear.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct Handwear {
    // message fields
    pub display_name: ::std::string::String,
    pub description: ::std::string::String,
    pub fire_defense: u32,
    pub frost_defense: u32,
    pub lightning_defense: u32,
    pub physical_defense: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Handwear {
    fn default() -> &'a Handwear {
        <Handwear as ::protobuf::Message>::default_instance()
    }
}

impl Handwear {
    pub fn new() -> Handwear {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &Handwear| { &m.display_name },
            |m: &mut Handwear| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Handwear| { &m.description },
            |m: &mut Handwear| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fire_defense",
            |m: &Handwear| { &m.fire_defense },
            |m: &mut Handwear| { &mut m.fire_defense },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "frost_defense",
            |m: &Handwear| { &m.frost_defense },
            |m: &mut Handwear| { &mut m.frost_defense },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lightning_defense",
            |m: &Handwear| { &m.lightning_defense },
            |m: &mut Handwear| { &mut m.lightning_defense },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "physical_defense",
            |m: &Handwear| { &m.physical_defense },
            |m: &mut Handwear| { &mut m.physical_defense },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Handwear>(
            "Handwear",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for Handwear {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.display_name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.description = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fire_defense = is.read_uint32()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.frost_defense = is.read_uint32()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.lightning_defense = is.read_uint32()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.physical_defense = is.read_uint32()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.display_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if self.fire_defense != 0 {
            my_size += ::protobuf::rt::value_size(3, self.fire_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frost_defense != 0 {
            my_size += ::protobuf::rt::value_size(4, self.frost_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lightning_defense != 0 {
            my_size += ::protobuf::rt::value_size(5, self.lightning_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.physical_defense != 0 {
            my_size += ::protobuf::rt::value_size(6, self.physical_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.display_name.is_empty() {
            os.write_string(1, &self.display_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if self.fire_defense != 0 {
            os.write_uint32(3, self.fire_defense)?;
        }
        if self.frost_defense != 0 {
            os.write_uint32(4, self.frost_defense)?;
        }
        if self.lightning_defense != 0 {
            os.write_uint32(5, self.lightning_defense)?;
        }
        if self.physical_defense != 0 {
            os.write_uint32(6, self.physical_defense)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Handwear {
        Handwear::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static Handwear {
        static instance: Handwear = Handwear {
            display_name: ::std::string::String::new(),
            description: ::std::string::String::new(),
            fire_defense: 0,
            frost_defense: 0,
            lightning_defense: 0,
            physical_defense: 0,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Handwear {
    fn clear(&mut self) {
        self.display_name.clear();
        self.description.clear();
        self.fire_defense = 0;
        self.frost_defense = 0;
        self.lightning_defense = 0;
        self.physical_defense = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Handwear {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Handwear {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ehandwear.proto\"\xef\x01\n\x08Handwear\x12!\n\x0cdisplay_name\x18\
    \x01\x20\x01(\tR\x0bdisplayName\x12\x20\n\x0bdescription\x18\x02\x20\x01\
    (\tR\x0bdescription\x12!\n\x0cfire_defense\x18\x03\x20\x01(\rR\x0bfireDe\
    fense\x12#\n\rfrost_defense\x18\x04\x20\x01(\rR\x0cfrostDefense\x12+\n\
    \x11lightning_defense\x18\x05\x20\x01(\rR\x10lightningDefense\x12)\n\x10\
    physical_defense\x18\x06\x20\x01(\rR\x0fphysicalDefenseb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        let mut messages = ::std::vec::Vec::new();
        messages.push(Handwear::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
