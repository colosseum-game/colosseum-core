// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `combatant.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Combatant {
    // message fields
    pub name: ::std::string::String,
    pub gender: super::gender::Gender,
    pub skills: ::protobuf::RepeatedField<::std::string::String>,
    pub hp: u32,
    pub fatigue: u32,
    pub dots: ::protobuf::RepeatedField<super::dot::DOT>,
    pub agility: u32,
    pub dexterity: u32,
    pub intelligence: u32,
    pub mind: u32,
    pub strength: u32,
    pub vigor: u32,
    pub vitality: u32,
    pub bodywear: ::std::string::String,
    pub footwear: ::std::string::String,
    pub handwear: ::std::string::String,
    pub headwear: ::std::string::String,
    pub legwear: ::std::string::String,
    pub weapon: ::std::string::String,
    pub agility_modifiers: ::protobuf::RepeatedField<super::modifier::Modifier>,
    pub dexterity_modifiers: ::protobuf::RepeatedField<super::modifier::Modifier>,
    pub intelligence_modifiers: ::protobuf::RepeatedField<super::modifier::Modifier>,
    pub mind_modifiers: ::protobuf::RepeatedField<super::modifier::Modifier>,
    pub strength_modifiers: ::protobuf::RepeatedField<super::modifier::Modifier>,
    pub vigor_modifiers: ::protobuf::RepeatedField<super::modifier::Modifier>,
    pub vitality_modifiers: ::protobuf::RepeatedField<super::modifier::Modifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Combatant {
    fn default() -> &'a Combatant {
        <Combatant as ::protobuf::Message>::default_instance()
    }
}

impl Combatant {
    pub fn new() -> Combatant {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .Gender gender = 2;


    pub fn get_gender(&self) -> super::gender::Gender {
        self.gender
    }
    pub fn clear_gender(&mut self) {
        self.gender = super::gender::Gender::GENDER_NONE;
    }

    // Param is passed by value, moved
    pub fn set_gender(&mut self, v: super::gender::Gender) {
        self.gender = v;
    }

    // repeated string skills = 3;


    pub fn get_skills(&self) -> &[::std::string::String] {
        &self.skills
    }
    pub fn clear_skills(&mut self) {
        self.skills.clear();
    }

    // Param is passed by value, moved
    pub fn set_skills(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.skills = v;
    }

    // Mutable pointer to the field.
    pub fn mut_skills(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.skills
    }

    // Take field
    pub fn take_skills(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.skills, ::protobuf::RepeatedField::new())
    }

    // uint32 hp = 4;


    pub fn get_hp(&self) -> u32 {
        self.hp
    }
    pub fn clear_hp(&mut self) {
        self.hp = 0;
    }

    // Param is passed by value, moved
    pub fn set_hp(&mut self, v: u32) {
        self.hp = v;
    }

    // uint32 fatigue = 5;


    pub fn get_fatigue(&self) -> u32 {
        self.fatigue
    }
    pub fn clear_fatigue(&mut self) {
        self.fatigue = 0;
    }

    // Param is passed by value, moved
    pub fn set_fatigue(&mut self, v: u32) {
        self.fatigue = v;
    }

    // repeated .DOT dots = 6;


    pub fn get_dots(&self) -> &[super::dot::DOT] {
        &self.dots
    }
    pub fn clear_dots(&mut self) {
        self.dots.clear();
    }

    // Param is passed by value, moved
    pub fn set_dots(&mut self, v: ::protobuf::RepeatedField<super::dot::DOT>) {
        self.dots = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dots(&mut self) -> &mut ::protobuf::RepeatedField<super::dot::DOT> {
        &mut self.dots
    }

    // Take field
    pub fn take_dots(&mut self) -> ::protobuf::RepeatedField<super::dot::DOT> {
        ::std::mem::replace(&mut self.dots, ::protobuf::RepeatedField::new())
    }

    // uint32 agility = 7;


    pub fn get_agility(&self) -> u32 {
        self.agility
    }
    pub fn clear_agility(&mut self) {
        self.agility = 0;
    }

    // Param is passed by value, moved
    pub fn set_agility(&mut self, v: u32) {
        self.agility = v;
    }

    // uint32 dexterity = 8;


    pub fn get_dexterity(&self) -> u32 {
        self.dexterity
    }
    pub fn clear_dexterity(&mut self) {
        self.dexterity = 0;
    }

    // Param is passed by value, moved
    pub fn set_dexterity(&mut self, v: u32) {
        self.dexterity = v;
    }

    // uint32 intelligence = 9;


    pub fn get_intelligence(&self) -> u32 {
        self.intelligence
    }
    pub fn clear_intelligence(&mut self) {
        self.intelligence = 0;
    }

    // Param is passed by value, moved
    pub fn set_intelligence(&mut self, v: u32) {
        self.intelligence = v;
    }

    // uint32 mind = 10;


    pub fn get_mind(&self) -> u32 {
        self.mind
    }
    pub fn clear_mind(&mut self) {
        self.mind = 0;
    }

    // Param is passed by value, moved
    pub fn set_mind(&mut self, v: u32) {
        self.mind = v;
    }

    // uint32 strength = 11;


    pub fn get_strength(&self) -> u32 {
        self.strength
    }
    pub fn clear_strength(&mut self) {
        self.strength = 0;
    }

    // Param is passed by value, moved
    pub fn set_strength(&mut self, v: u32) {
        self.strength = v;
    }

    // uint32 vigor = 12;


    pub fn get_vigor(&self) -> u32 {
        self.vigor
    }
    pub fn clear_vigor(&mut self) {
        self.vigor = 0;
    }

    // Param is passed by value, moved
    pub fn set_vigor(&mut self, v: u32) {
        self.vigor = v;
    }

    // uint32 vitality = 13;


    pub fn get_vitality(&self) -> u32 {
        self.vitality
    }
    pub fn clear_vitality(&mut self) {
        self.vitality = 0;
    }

    // Param is passed by value, moved
    pub fn set_vitality(&mut self, v: u32) {
        self.vitality = v;
    }

    // string bodywear = 14;


    pub fn get_bodywear(&self) -> &str {
        &self.bodywear
    }
    pub fn clear_bodywear(&mut self) {
        self.bodywear.clear();
    }

    // Param is passed by value, moved
    pub fn set_bodywear(&mut self, v: ::std::string::String) {
        self.bodywear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bodywear(&mut self) -> &mut ::std::string::String {
        &mut self.bodywear
    }

    // Take field
    pub fn take_bodywear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bodywear, ::std::string::String::new())
    }

    // string footwear = 15;


    pub fn get_footwear(&self) -> &str {
        &self.footwear
    }
    pub fn clear_footwear(&mut self) {
        self.footwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_footwear(&mut self, v: ::std::string::String) {
        self.footwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_footwear(&mut self) -> &mut ::std::string::String {
        &mut self.footwear
    }

    // Take field
    pub fn take_footwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.footwear, ::std::string::String::new())
    }

    // string handwear = 16;


    pub fn get_handwear(&self) -> &str {
        &self.handwear
    }
    pub fn clear_handwear(&mut self) {
        self.handwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_handwear(&mut self, v: ::std::string::String) {
        self.handwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_handwear(&mut self) -> &mut ::std::string::String {
        &mut self.handwear
    }

    // Take field
    pub fn take_handwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.handwear, ::std::string::String::new())
    }

    // string headwear = 17;


    pub fn get_headwear(&self) -> &str {
        &self.headwear
    }
    pub fn clear_headwear(&mut self) {
        self.headwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_headwear(&mut self, v: ::std::string::String) {
        self.headwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_headwear(&mut self) -> &mut ::std::string::String {
        &mut self.headwear
    }

    // Take field
    pub fn take_headwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.headwear, ::std::string::String::new())
    }

    // string legwear = 18;


    pub fn get_legwear(&self) -> &str {
        &self.legwear
    }
    pub fn clear_legwear(&mut self) {
        self.legwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_legwear(&mut self, v: ::std::string::String) {
        self.legwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_legwear(&mut self) -> &mut ::std::string::String {
        &mut self.legwear
    }

    // Take field
    pub fn take_legwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.legwear, ::std::string::String::new())
    }

    // string weapon = 19;


    pub fn get_weapon(&self) -> &str {
        &self.weapon
    }
    pub fn clear_weapon(&mut self) {
        self.weapon.clear();
    }

    // Param is passed by value, moved
    pub fn set_weapon(&mut self, v: ::std::string::String) {
        self.weapon = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weapon(&mut self) -> &mut ::std::string::String {
        &mut self.weapon
    }

    // Take field
    pub fn take_weapon(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.weapon, ::std::string::String::new())
    }

    // repeated .Modifier agility_modifiers = 20;


    pub fn get_agility_modifiers(&self) -> &[super::modifier::Modifier] {
        &self.agility_modifiers
    }
    pub fn clear_agility_modifiers(&mut self) {
        self.agility_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_agility_modifiers(&mut self, v: ::protobuf::RepeatedField<super::modifier::Modifier>) {
        self.agility_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_agility_modifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::modifier::Modifier> {
        &mut self.agility_modifiers
    }

    // Take field
    pub fn take_agility_modifiers(&mut self) -> ::protobuf::RepeatedField<super::modifier::Modifier> {
        ::std::mem::replace(&mut self.agility_modifiers, ::protobuf::RepeatedField::new())
    }

    // repeated .Modifier dexterity_modifiers = 21;


    pub fn get_dexterity_modifiers(&self) -> &[super::modifier::Modifier] {
        &self.dexterity_modifiers
    }
    pub fn clear_dexterity_modifiers(&mut self) {
        self.dexterity_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_dexterity_modifiers(&mut self, v: ::protobuf::RepeatedField<super::modifier::Modifier>) {
        self.dexterity_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dexterity_modifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::modifier::Modifier> {
        &mut self.dexterity_modifiers
    }

    // Take field
    pub fn take_dexterity_modifiers(&mut self) -> ::protobuf::RepeatedField<super::modifier::Modifier> {
        ::std::mem::replace(&mut self.dexterity_modifiers, ::protobuf::RepeatedField::new())
    }

    // repeated .Modifier intelligence_modifiers = 22;


    pub fn get_intelligence_modifiers(&self) -> &[super::modifier::Modifier] {
        &self.intelligence_modifiers
    }
    pub fn clear_intelligence_modifiers(&mut self) {
        self.intelligence_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_intelligence_modifiers(&mut self, v: ::protobuf::RepeatedField<super::modifier::Modifier>) {
        self.intelligence_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_intelligence_modifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::modifier::Modifier> {
        &mut self.intelligence_modifiers
    }

    // Take field
    pub fn take_intelligence_modifiers(&mut self) -> ::protobuf::RepeatedField<super::modifier::Modifier> {
        ::std::mem::replace(&mut self.intelligence_modifiers, ::protobuf::RepeatedField::new())
    }

    // repeated .Modifier mind_modifiers = 23;


    pub fn get_mind_modifiers(&self) -> &[super::modifier::Modifier] {
        &self.mind_modifiers
    }
    pub fn clear_mind_modifiers(&mut self) {
        self.mind_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_mind_modifiers(&mut self, v: ::protobuf::RepeatedField<super::modifier::Modifier>) {
        self.mind_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mind_modifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::modifier::Modifier> {
        &mut self.mind_modifiers
    }

    // Take field
    pub fn take_mind_modifiers(&mut self) -> ::protobuf::RepeatedField<super::modifier::Modifier> {
        ::std::mem::replace(&mut self.mind_modifiers, ::protobuf::RepeatedField::new())
    }

    // repeated .Modifier strength_modifiers = 24;


    pub fn get_strength_modifiers(&self) -> &[super::modifier::Modifier] {
        &self.strength_modifiers
    }
    pub fn clear_strength_modifiers(&mut self) {
        self.strength_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_strength_modifiers(&mut self, v: ::protobuf::RepeatedField<super::modifier::Modifier>) {
        self.strength_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_strength_modifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::modifier::Modifier> {
        &mut self.strength_modifiers
    }

    // Take field
    pub fn take_strength_modifiers(&mut self) -> ::protobuf::RepeatedField<super::modifier::Modifier> {
        ::std::mem::replace(&mut self.strength_modifiers, ::protobuf::RepeatedField::new())
    }

    // repeated .Modifier vigor_modifiers = 25;


    pub fn get_vigor_modifiers(&self) -> &[super::modifier::Modifier] {
        &self.vigor_modifiers
    }
    pub fn clear_vigor_modifiers(&mut self) {
        self.vigor_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_vigor_modifiers(&mut self, v: ::protobuf::RepeatedField<super::modifier::Modifier>) {
        self.vigor_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vigor_modifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::modifier::Modifier> {
        &mut self.vigor_modifiers
    }

    // Take field
    pub fn take_vigor_modifiers(&mut self) -> ::protobuf::RepeatedField<super::modifier::Modifier> {
        ::std::mem::replace(&mut self.vigor_modifiers, ::protobuf::RepeatedField::new())
    }

    // repeated .Modifier vitality_modifiers = 26;


    pub fn get_vitality_modifiers(&self) -> &[super::modifier::Modifier] {
        &self.vitality_modifiers
    }
    pub fn clear_vitality_modifiers(&mut self) {
        self.vitality_modifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_vitality_modifiers(&mut self, v: ::protobuf::RepeatedField<super::modifier::Modifier>) {
        self.vitality_modifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vitality_modifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::modifier::Modifier> {
        &mut self.vitality_modifiers
    }

    // Take field
    pub fn take_vitality_modifiers(&mut self) -> ::protobuf::RepeatedField<super::modifier::Modifier> {
        ::std::mem::replace(&mut self.vitality_modifiers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Combatant {
    fn is_initialized(&self) -> bool {
        for v in &self.dots {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.agility_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dexterity_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.intelligence_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mind_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.strength_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vigor_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vitality_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.gender, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.skills)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hp = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fatigue = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dots)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.agility = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dexterity = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.intelligence = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mind = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.strength = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.vigor = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.vitality = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bodywear)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.footwear)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.handwear)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.headwear)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.legwear)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.weapon)?;
                },
                20 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.agility_modifiers)?;
                },
                21 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dexterity_modifiers)?;
                },
                22 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.intelligence_modifiers)?;
                },
                23 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mind_modifiers)?;
                },
                24 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.strength_modifiers)?;
                },
                25 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vigor_modifiers)?;
                },
                26 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vitality_modifiers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.gender != super::gender::Gender::GENDER_NONE {
            my_size += ::protobuf::rt::enum_size(2, self.gender);
        }
        for value in &self.skills {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.hp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fatigue != 0 {
            my_size += ::protobuf::rt::value_size(5, self.fatigue, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.dots {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.agility != 0 {
            my_size += ::protobuf::rt::value_size(7, self.agility, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dexterity != 0 {
            my_size += ::protobuf::rt::value_size(8, self.dexterity, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.intelligence != 0 {
            my_size += ::protobuf::rt::value_size(9, self.intelligence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mind != 0 {
            my_size += ::protobuf::rt::value_size(10, self.mind, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.strength != 0 {
            my_size += ::protobuf::rt::value_size(11, self.strength, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vigor != 0 {
            my_size += ::protobuf::rt::value_size(12, self.vigor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vitality != 0 {
            my_size += ::protobuf::rt::value_size(13, self.vitality, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bodywear.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.bodywear);
        }
        if !self.footwear.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.footwear);
        }
        if !self.handwear.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.handwear);
        }
        if !self.headwear.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.headwear);
        }
        if !self.legwear.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.legwear);
        }
        if !self.weapon.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.weapon);
        }
        for value in &self.agility_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.dexterity_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.intelligence_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.mind_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.strength_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.vigor_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.vitality_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.gender != super::gender::Gender::GENDER_NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.gender))?;
        }
        for v in &self.skills {
            os.write_string(3, &v)?;
        };
        if self.hp != 0 {
            os.write_uint32(4, self.hp)?;
        }
        if self.fatigue != 0 {
            os.write_uint32(5, self.fatigue)?;
        }
        for v in &self.dots {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.agility != 0 {
            os.write_uint32(7, self.agility)?;
        }
        if self.dexterity != 0 {
            os.write_uint32(8, self.dexterity)?;
        }
        if self.intelligence != 0 {
            os.write_uint32(9, self.intelligence)?;
        }
        if self.mind != 0 {
            os.write_uint32(10, self.mind)?;
        }
        if self.strength != 0 {
            os.write_uint32(11, self.strength)?;
        }
        if self.vigor != 0 {
            os.write_uint32(12, self.vigor)?;
        }
        if self.vitality != 0 {
            os.write_uint32(13, self.vitality)?;
        }
        if !self.bodywear.is_empty() {
            os.write_string(14, &self.bodywear)?;
        }
        if !self.footwear.is_empty() {
            os.write_string(15, &self.footwear)?;
        }
        if !self.handwear.is_empty() {
            os.write_string(16, &self.handwear)?;
        }
        if !self.headwear.is_empty() {
            os.write_string(17, &self.headwear)?;
        }
        if !self.legwear.is_empty() {
            os.write_string(18, &self.legwear)?;
        }
        if !self.weapon.is_empty() {
            os.write_string(19, &self.weapon)?;
        }
        for v in &self.agility_modifiers {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.dexterity_modifiers {
            os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.intelligence_modifiers {
            os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.mind_modifiers {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.strength_modifiers {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.vigor_modifiers {
            os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.vitality_modifiers {
            os.write_tag(26, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Combatant {
        Combatant::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Combatant| { &m.name },
                |m: &mut Combatant| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::gender::Gender>>(
                "gender",
                |m: &Combatant| { &m.gender },
                |m: &mut Combatant| { &mut m.gender },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "skills",
                |m: &Combatant| { &m.skills },
                |m: &mut Combatant| { &mut m.skills },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hp",
                |m: &Combatant| { &m.hp },
                |m: &mut Combatant| { &mut m.hp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fatigue",
                |m: &Combatant| { &m.fatigue },
                |m: &mut Combatant| { &mut m.fatigue },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::dot::DOT>>(
                "dots",
                |m: &Combatant| { &m.dots },
                |m: &mut Combatant| { &mut m.dots },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "agility",
                |m: &Combatant| { &m.agility },
                |m: &mut Combatant| { &mut m.agility },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dexterity",
                |m: &Combatant| { &m.dexterity },
                |m: &mut Combatant| { &mut m.dexterity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "intelligence",
                |m: &Combatant| { &m.intelligence },
                |m: &mut Combatant| { &mut m.intelligence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mind",
                |m: &Combatant| { &m.mind },
                |m: &mut Combatant| { &mut m.mind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "strength",
                |m: &Combatant| { &m.strength },
                |m: &mut Combatant| { &mut m.strength },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "vigor",
                |m: &Combatant| { &m.vigor },
                |m: &mut Combatant| { &mut m.vigor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "vitality",
                |m: &Combatant| { &m.vitality },
                |m: &mut Combatant| { &mut m.vitality },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bodywear",
                |m: &Combatant| { &m.bodywear },
                |m: &mut Combatant| { &mut m.bodywear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "footwear",
                |m: &Combatant| { &m.footwear },
                |m: &mut Combatant| { &mut m.footwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "handwear",
                |m: &Combatant| { &m.handwear },
                |m: &mut Combatant| { &mut m.handwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "headwear",
                |m: &Combatant| { &m.headwear },
                |m: &mut Combatant| { &mut m.headwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "legwear",
                |m: &Combatant| { &m.legwear },
                |m: &mut Combatant| { &mut m.legwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "weapon",
                |m: &Combatant| { &m.weapon },
                |m: &mut Combatant| { &mut m.weapon },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::modifier::Modifier>>(
                "agility_modifiers",
                |m: &Combatant| { &m.agility_modifiers },
                |m: &mut Combatant| { &mut m.agility_modifiers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::modifier::Modifier>>(
                "dexterity_modifiers",
                |m: &Combatant| { &m.dexterity_modifiers },
                |m: &mut Combatant| { &mut m.dexterity_modifiers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::modifier::Modifier>>(
                "intelligence_modifiers",
                |m: &Combatant| { &m.intelligence_modifiers },
                |m: &mut Combatant| { &mut m.intelligence_modifiers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::modifier::Modifier>>(
                "mind_modifiers",
                |m: &Combatant| { &m.mind_modifiers },
                |m: &mut Combatant| { &mut m.mind_modifiers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::modifier::Modifier>>(
                "strength_modifiers",
                |m: &Combatant| { &m.strength_modifiers },
                |m: &mut Combatant| { &mut m.strength_modifiers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::modifier::Modifier>>(
                "vigor_modifiers",
                |m: &Combatant| { &m.vigor_modifiers },
                |m: &mut Combatant| { &mut m.vigor_modifiers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::modifier::Modifier>>(
                "vitality_modifiers",
                |m: &Combatant| { &m.vitality_modifiers },
                |m: &mut Combatant| { &mut m.vitality_modifiers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Combatant>(
                "Combatant",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Combatant {
        static instance: ::protobuf::rt::LazyV2<Combatant> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Combatant::new)
    }
}

impl ::protobuf::Clear for Combatant {
    fn clear(&mut self) {
        self.name.clear();
        self.gender = super::gender::Gender::GENDER_NONE;
        self.skills.clear();
        self.hp = 0;
        self.fatigue = 0;
        self.dots.clear();
        self.agility = 0;
        self.dexterity = 0;
        self.intelligence = 0;
        self.mind = 0;
        self.strength = 0;
        self.vigor = 0;
        self.vitality = 0;
        self.bodywear.clear();
        self.footwear.clear();
        self.handwear.clear();
        self.headwear.clear();
        self.legwear.clear();
        self.weapon.clear();
        self.agility_modifiers.clear();
        self.dexterity_modifiers.clear();
        self.intelligence_modifiers.clear();
        self.mind_modifiers.clear();
        self.strength_modifiers.clear();
        self.vigor_modifiers.clear();
        self.vitality_modifiers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Combatant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Combatant {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fcombatant.proto\x1a\tdot.proto\x1a\x0cgender.proto\x1a\x0emodifier\
    .proto\"\x8c\x07\n\tCombatant\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04n\
    ame\x12\x1f\n\x06gender\x18\x02\x20\x01(\x0e2\x07.GenderR\x06gender\x12\
    \x16\n\x06skills\x18\x03\x20\x03(\tR\x06skills\x12\x0e\n\x02hp\x18\x04\
    \x20\x01(\rR\x02hp\x12\x18\n\x07fatigue\x18\x05\x20\x01(\rR\x07fatigue\
    \x12\x18\n\x04dots\x18\x06\x20\x03(\x0b2\x04.DOTR\x04dots\x12\x18\n\x07a\
    gility\x18\x07\x20\x01(\rR\x07agility\x12\x1c\n\tdexterity\x18\x08\x20\
    \x01(\rR\tdexterity\x12\"\n\x0cintelligence\x18\t\x20\x01(\rR\x0cintelli\
    gence\x12\x12\n\x04mind\x18\n\x20\x01(\rR\x04mind\x12\x1a\n\x08strength\
    \x18\x0b\x20\x01(\rR\x08strength\x12\x14\n\x05vigor\x18\x0c\x20\x01(\rR\
    \x05vigor\x12\x1a\n\x08vitality\x18\r\x20\x01(\rR\x08vitality\x12\x1a\n\
    \x08bodywear\x18\x0e\x20\x01(\tR\x08bodywear\x12\x1a\n\x08footwear\x18\
    \x0f\x20\x01(\tR\x08footwear\x12\x1a\n\x08handwear\x18\x10\x20\x01(\tR\
    \x08handwear\x12\x1a\n\x08headwear\x18\x11\x20\x01(\tR\x08headwear\x12\
    \x18\n\x07legwear\x18\x12\x20\x01(\tR\x07legwear\x12\x16\n\x06weapon\x18\
    \x13\x20\x01(\tR\x06weapon\x126\n\x11agility_modifiers\x18\x14\x20\x03(\
    \x0b2\t.ModifierR\x10agilityModifiers\x12:\n\x13dexterity_modifiers\x18\
    \x15\x20\x03(\x0b2\t.ModifierR\x12dexterityModifiers\x12@\n\x16intellige\
    nce_modifiers\x18\x16\x20\x03(\x0b2\t.ModifierR\x15intelligenceModifiers\
    \x120\n\x0emind_modifiers\x18\x17\x20\x03(\x0b2\t.ModifierR\rmindModifie\
    rs\x128\n\x12strength_modifiers\x18\x18\x20\x03(\x0b2\t.ModifierR\x11str\
    engthModifiers\x122\n\x0fvigor_modifiers\x18\x19\x20\x03(\x0b2\t.Modifie\
    rR\x0evigorModifiers\x128\n\x12vitality_modifiers\x18\x1a\x20\x03(\x0b2\
    \t.ModifierR\x11vitalityModifiersb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
