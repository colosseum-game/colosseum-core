// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.14.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `combatant.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct Combatant {
    // message fields
    pub name: ::std::string::String,
    pub gender: ::protobuf::ProtobufEnumOrUnknown<super::gender::Gender>,
    pub skills: ::std::vec::Vec<::std::string::String>,
    pub hp: u32,
    pub fatigue: u32,
    pub dots: ::std::vec::Vec<super::dot::DOT>,
    pub agility: u32,
    pub dexterity: u32,
    pub intelligence: u32,
    pub mind: u32,
    pub strength: u32,
    pub vigor: u32,
    pub vitality: u32,
    pub bodywear: ::std::string::String,
    pub footwear: ::std::string::String,
    pub handwear: ::std::string::String,
    pub headwear: ::std::string::String,
    pub legwear: ::std::string::String,
    pub weapon: ::std::string::String,
    pub agility_modifiers: ::std::vec::Vec<super::modifier::Modifier>,
    pub dexterity_modifiers: ::std::vec::Vec<super::modifier::Modifier>,
    pub intelligence_modifiers: ::std::vec::Vec<super::modifier::Modifier>,
    pub mind_modifiers: ::std::vec::Vec<super::modifier::Modifier>,
    pub strength_modifiers: ::std::vec::Vec<super::modifier::Modifier>,
    pub vigor_modifiers: ::std::vec::Vec<super::modifier::Modifier>,
    pub vitality_modifiers: ::std::vec::Vec<super::modifier::Modifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Combatant {
    fn default() -> &'a Combatant {
        <Combatant as ::protobuf::Message>::default_instance()
    }
}

impl Combatant {
    pub fn new() -> Combatant {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Combatant| { &m.name },
            |m: &mut Combatant| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gender",
            |m: &Combatant| { &m.gender },
            |m: &mut Combatant| { &mut m.gender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "skills",
            |m: &Combatant| { &m.skills },
            |m: &mut Combatant| { &mut m.skills },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hp",
            |m: &Combatant| { &m.hp },
            |m: &mut Combatant| { &mut m.hp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fatigue",
            |m: &Combatant| { &m.fatigue },
            |m: &mut Combatant| { &mut m.fatigue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dots",
            |m: &Combatant| { &m.dots },
            |m: &mut Combatant| { &mut m.dots },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "agility",
            |m: &Combatant| { &m.agility },
            |m: &mut Combatant| { &mut m.agility },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dexterity",
            |m: &Combatant| { &m.dexterity },
            |m: &mut Combatant| { &mut m.dexterity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "intelligence",
            |m: &Combatant| { &m.intelligence },
            |m: &mut Combatant| { &mut m.intelligence },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mind",
            |m: &Combatant| { &m.mind },
            |m: &mut Combatant| { &mut m.mind },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "strength",
            |m: &Combatant| { &m.strength },
            |m: &mut Combatant| { &mut m.strength },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vigor",
            |m: &Combatant| { &m.vigor },
            |m: &mut Combatant| { &mut m.vigor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vitality",
            |m: &Combatant| { &m.vitality },
            |m: &mut Combatant| { &mut m.vitality },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bodywear",
            |m: &Combatant| { &m.bodywear },
            |m: &mut Combatant| { &mut m.bodywear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "footwear",
            |m: &Combatant| { &m.footwear },
            |m: &mut Combatant| { &mut m.footwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "handwear",
            |m: &Combatant| { &m.handwear },
            |m: &mut Combatant| { &mut m.handwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "headwear",
            |m: &Combatant| { &m.headwear },
            |m: &mut Combatant| { &mut m.headwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "legwear",
            |m: &Combatant| { &m.legwear },
            |m: &mut Combatant| { &mut m.legwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weapon",
            |m: &Combatant| { &m.weapon },
            |m: &mut Combatant| { &mut m.weapon },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "agility_modifiers",
            |m: &Combatant| { &m.agility_modifiers },
            |m: &mut Combatant| { &mut m.agility_modifiers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dexterity_modifiers",
            |m: &Combatant| { &m.dexterity_modifiers },
            |m: &mut Combatant| { &mut m.dexterity_modifiers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "intelligence_modifiers",
            |m: &Combatant| { &m.intelligence_modifiers },
            |m: &mut Combatant| { &mut m.intelligence_modifiers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "mind_modifiers",
            |m: &Combatant| { &m.mind_modifiers },
            |m: &mut Combatant| { &mut m.mind_modifiers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "strength_modifiers",
            |m: &Combatant| { &m.strength_modifiers },
            |m: &mut Combatant| { &mut m.strength_modifiers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "vigor_modifiers",
            |m: &Combatant| { &m.vigor_modifiers },
            |m: &mut Combatant| { &mut m.vigor_modifiers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "vitality_modifiers",
            |m: &Combatant| { &m.vitality_modifiers },
            |m: &mut Combatant| { &mut m.vitality_modifiers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Combatant>(
            "Combatant",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for Combatant {
    fn is_initialized(&self) -> bool {
        for v in &self.dots {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.agility_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dexterity_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.intelligence_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mind_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.strength_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vigor_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vitality_modifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.gender = is.read_enum_or_unknown()?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.skills)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.hp = is.read_uint32()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fatigue = is.read_uint32()?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.dots)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.agility = is.read_uint32()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.dexterity = is.read_uint32()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.intelligence = is.read_uint32()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.mind = is.read_uint32()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.strength = is.read_uint32()?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.vigor = is.read_uint32()?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.vitality = is.read_uint32()?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bodywear = is.read_string()?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.footwear = is.read_string()?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.handwear = is.read_string()?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.headwear = is.read_string()?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.legwear = is.read_string()?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.weapon = is.read_string()?;
                },
                20 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.agility_modifiers)?;
                },
                21 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.dexterity_modifiers)?;
                },
                22 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.intelligence_modifiers)?;
                },
                23 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.mind_modifiers)?;
                },
                24 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.strength_modifiers)?;
                },
                25 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.vigor_modifiers)?;
                },
                26 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.vitality_modifiers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.gender != ::protobuf::ProtobufEnumOrUnknown::new(super::gender::Gender::GENDER_NONE) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.gender);
        }
        for value in &self.skills {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.hp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.hp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fatigue != 0 {
            my_size += ::protobuf::rt::value_size(5, self.fatigue, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.dots {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.agility != 0 {
            my_size += ::protobuf::rt::value_size(7, self.agility, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dexterity != 0 {
            my_size += ::protobuf::rt::value_size(8, self.dexterity, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.intelligence != 0 {
            my_size += ::protobuf::rt::value_size(9, self.intelligence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mind != 0 {
            my_size += ::protobuf::rt::value_size(10, self.mind, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.strength != 0 {
            my_size += ::protobuf::rt::value_size(11, self.strength, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vigor != 0 {
            my_size += ::protobuf::rt::value_size(12, self.vigor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.vitality != 0 {
            my_size += ::protobuf::rt::value_size(13, self.vitality, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bodywear.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.bodywear);
        }
        if !self.footwear.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.footwear);
        }
        if !self.handwear.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.handwear);
        }
        if !self.headwear.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.headwear);
        }
        if !self.legwear.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.legwear);
        }
        if !self.weapon.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.weapon);
        }
        for value in &self.agility_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.dexterity_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.intelligence_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.mind_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.strength_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.vigor_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.vitality_modifiers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.gender != ::protobuf::ProtobufEnumOrUnknown::new(super::gender::Gender::GENDER_NONE) {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&self.gender))?;
        }
        for v in &self.skills {
            os.write_string(3, &v)?;
        };
        if self.hp != 0 {
            os.write_uint32(4, self.hp)?;
        }
        if self.fatigue != 0 {
            os.write_uint32(5, self.fatigue)?;
        }
        for v in &self.dots {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if self.agility != 0 {
            os.write_uint32(7, self.agility)?;
        }
        if self.dexterity != 0 {
            os.write_uint32(8, self.dexterity)?;
        }
        if self.intelligence != 0 {
            os.write_uint32(9, self.intelligence)?;
        }
        if self.mind != 0 {
            os.write_uint32(10, self.mind)?;
        }
        if self.strength != 0 {
            os.write_uint32(11, self.strength)?;
        }
        if self.vigor != 0 {
            os.write_uint32(12, self.vigor)?;
        }
        if self.vitality != 0 {
            os.write_uint32(13, self.vitality)?;
        }
        if !self.bodywear.is_empty() {
            os.write_string(14, &self.bodywear)?;
        }
        if !self.footwear.is_empty() {
            os.write_string(15, &self.footwear)?;
        }
        if !self.handwear.is_empty() {
            os.write_string(16, &self.handwear)?;
        }
        if !self.headwear.is_empty() {
            os.write_string(17, &self.headwear)?;
        }
        if !self.legwear.is_empty() {
            os.write_string(18, &self.legwear)?;
        }
        if !self.weapon.is_empty() {
            os.write_string(19, &self.weapon)?;
        }
        for v in &self.agility_modifiers {
            ::protobuf::rt::write_message_field_with_cached_size(20, v, os)?;
        };
        for v in &self.dexterity_modifiers {
            ::protobuf::rt::write_message_field_with_cached_size(21, v, os)?;
        };
        for v in &self.intelligence_modifiers {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        };
        for v in &self.mind_modifiers {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        };
        for v in &self.strength_modifiers {
            ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        };
        for v in &self.vigor_modifiers {
            ::protobuf::rt::write_message_field_with_cached_size(25, v, os)?;
        };
        for v in &self.vitality_modifiers {
            ::protobuf::rt::write_message_field_with_cached_size(26, v, os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Combatant {
        Combatant::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static Combatant {
        static instance: Combatant = Combatant {
            name: ::std::string::String::new(),
            gender: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            skills: ::std::vec::Vec::new(),
            hp: 0,
            fatigue: 0,
            dots: ::std::vec::Vec::new(),
            agility: 0,
            dexterity: 0,
            intelligence: 0,
            mind: 0,
            strength: 0,
            vigor: 0,
            vitality: 0,
            bodywear: ::std::string::String::new(),
            footwear: ::std::string::String::new(),
            handwear: ::std::string::String::new(),
            headwear: ::std::string::String::new(),
            legwear: ::std::string::String::new(),
            weapon: ::std::string::String::new(),
            agility_modifiers: ::std::vec::Vec::new(),
            dexterity_modifiers: ::std::vec::Vec::new(),
            intelligence_modifiers: ::std::vec::Vec::new(),
            mind_modifiers: ::std::vec::Vec::new(),
            strength_modifiers: ::std::vec::Vec::new(),
            vigor_modifiers: ::std::vec::Vec::new(),
            vitality_modifiers: ::std::vec::Vec::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Combatant {
    fn clear(&mut self) {
        self.name.clear();
        self.gender = ::protobuf::ProtobufEnumOrUnknown::new(super::gender::Gender::GENDER_NONE);
        self.skills.clear();
        self.hp = 0;
        self.fatigue = 0;
        self.dots.clear();
        self.agility = 0;
        self.dexterity = 0;
        self.intelligence = 0;
        self.mind = 0;
        self.strength = 0;
        self.vigor = 0;
        self.vitality = 0;
        self.bodywear.clear();
        self.footwear.clear();
        self.handwear.clear();
        self.headwear.clear();
        self.legwear.clear();
        self.weapon.clear();
        self.agility_modifiers.clear();
        self.dexterity_modifiers.clear();
        self.intelligence_modifiers.clear();
        self.mind_modifiers.clear();
        self.strength_modifiers.clear();
        self.vigor_modifiers.clear();
        self.vitality_modifiers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Combatant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Combatant {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fcombatant.proto\x1a\tdot.proto\x1a\x0cgender.proto\x1a\x0emodifier\
    .proto\"\x8c\x07\n\tCombatant\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04n\
    ame\x12\x1f\n\x06gender\x18\x02\x20\x01(\x0e2\x07.GenderR\x06gender\x12\
    \x16\n\x06skills\x18\x03\x20\x03(\tR\x06skills\x12\x0e\n\x02hp\x18\x04\
    \x20\x01(\rR\x02hp\x12\x18\n\x07fatigue\x18\x05\x20\x01(\rR\x07fatigue\
    \x12\x18\n\x04dots\x18\x06\x20\x03(\x0b2\x04.DOTR\x04dots\x12\x18\n\x07a\
    gility\x18\x07\x20\x01(\rR\x07agility\x12\x1c\n\tdexterity\x18\x08\x20\
    \x01(\rR\tdexterity\x12\"\n\x0cintelligence\x18\t\x20\x01(\rR\x0cintelli\
    gence\x12\x12\n\x04mind\x18\n\x20\x01(\rR\x04mind\x12\x1a\n\x08strength\
    \x18\x0b\x20\x01(\rR\x08strength\x12\x14\n\x05vigor\x18\x0c\x20\x01(\rR\
    \x05vigor\x12\x1a\n\x08vitality\x18\r\x20\x01(\rR\x08vitality\x12\x1a\n\
    \x08bodywear\x18\x0e\x20\x01(\tR\x08bodywear\x12\x1a\n\x08footwear\x18\
    \x0f\x20\x01(\tR\x08footwear\x12\x1a\n\x08handwear\x18\x10\x20\x01(\tR\
    \x08handwear\x12\x1a\n\x08headwear\x18\x11\x20\x01(\tR\x08headwear\x12\
    \x18\n\x07legwear\x18\x12\x20\x01(\tR\x07legwear\x12\x16\n\x06weapon\x18\
    \x13\x20\x01(\tR\x06weapon\x126\n\x11agility_modifiers\x18\x14\x20\x03(\
    \x0b2\t.ModifierR\x10agilityModifiers\x12:\n\x13dexterity_modifiers\x18\
    \x15\x20\x03(\x0b2\t.ModifierR\x12dexterityModifiers\x12@\n\x16intellige\
    nce_modifiers\x18\x16\x20\x03(\x0b2\t.ModifierR\x15intelligenceModifiers\
    \x120\n\x0emind_modifiers\x18\x17\x20\x03(\x0b2\t.ModifierR\rmindModifie\
    rs\x128\n\x12strength_modifiers\x18\x18\x20\x03(\x0b2\t.ModifierR\x11str\
    engthModifiers\x122\n\x0fvigor_modifiers\x18\x19\x20\x03(\x0b2\t.Modifie\
    rR\x0evigorModifiers\x128\n\x12vitality_modifiers\x18\x1a\x20\x03(\x0b2\
    \t.ModifierR\x11vitalityModifiersb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::dot::file_descriptor());
        deps.push(super::gender::file_descriptor());
        deps.push(super::modifier::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(Combatant::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
