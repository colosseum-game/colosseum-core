// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `opponent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Opponent {
    // message fields
    pub name: ::std::string::String,
    pub gender: super::gender::Gender,
    pub bodywear: ::std::string::String,
    pub footwear: ::std::string::String,
    pub handwear: ::std::string::String,
    pub headwear: ::std::string::String,
    pub legwear: ::std::string::String,
    pub weapon: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Opponent {
    fn default() -> &'a Opponent {
        <Opponent as ::protobuf::Message>::default_instance()
    }
}

impl Opponent {
    pub fn new() -> Opponent {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .Gender gender = 2;


    pub fn get_gender(&self) -> super::gender::Gender {
        self.gender
    }
    pub fn clear_gender(&mut self) {
        self.gender = super::gender::Gender::GENDER_NONE;
    }

    // Param is passed by value, moved
    pub fn set_gender(&mut self, v: super::gender::Gender) {
        self.gender = v;
    }

    // string bodywear = 3;


    pub fn get_bodywear(&self) -> &str {
        &self.bodywear
    }
    pub fn clear_bodywear(&mut self) {
        self.bodywear.clear();
    }

    // Param is passed by value, moved
    pub fn set_bodywear(&mut self, v: ::std::string::String) {
        self.bodywear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bodywear(&mut self) -> &mut ::std::string::String {
        &mut self.bodywear
    }

    // Take field
    pub fn take_bodywear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bodywear, ::std::string::String::new())
    }

    // string footwear = 4;


    pub fn get_footwear(&self) -> &str {
        &self.footwear
    }
    pub fn clear_footwear(&mut self) {
        self.footwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_footwear(&mut self, v: ::std::string::String) {
        self.footwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_footwear(&mut self) -> &mut ::std::string::String {
        &mut self.footwear
    }

    // Take field
    pub fn take_footwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.footwear, ::std::string::String::new())
    }

    // string handwear = 5;


    pub fn get_handwear(&self) -> &str {
        &self.handwear
    }
    pub fn clear_handwear(&mut self) {
        self.handwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_handwear(&mut self, v: ::std::string::String) {
        self.handwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_handwear(&mut self) -> &mut ::std::string::String {
        &mut self.handwear
    }

    // Take field
    pub fn take_handwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.handwear, ::std::string::String::new())
    }

    // string headwear = 6;


    pub fn get_headwear(&self) -> &str {
        &self.headwear
    }
    pub fn clear_headwear(&mut self) {
        self.headwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_headwear(&mut self, v: ::std::string::String) {
        self.headwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_headwear(&mut self) -> &mut ::std::string::String {
        &mut self.headwear
    }

    // Take field
    pub fn take_headwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.headwear, ::std::string::String::new())
    }

    // string legwear = 7;


    pub fn get_legwear(&self) -> &str {
        &self.legwear
    }
    pub fn clear_legwear(&mut self) {
        self.legwear.clear();
    }

    // Param is passed by value, moved
    pub fn set_legwear(&mut self, v: ::std::string::String) {
        self.legwear = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_legwear(&mut self) -> &mut ::std::string::String {
        &mut self.legwear
    }

    // Take field
    pub fn take_legwear(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.legwear, ::std::string::String::new())
    }

    // string weapon = 8;


    pub fn get_weapon(&self) -> &str {
        &self.weapon
    }
    pub fn clear_weapon(&mut self) {
        self.weapon.clear();
    }

    // Param is passed by value, moved
    pub fn set_weapon(&mut self, v: ::std::string::String) {
        self.weapon = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weapon(&mut self) -> &mut ::std::string::String {
        &mut self.weapon
    }

    // Take field
    pub fn take_weapon(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.weapon, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Opponent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.gender, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bodywear)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.footwear)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.handwear)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.headwear)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.legwear)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.weapon)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.gender != super::gender::Gender::GENDER_NONE {
            my_size += ::protobuf::rt::enum_size(2, self.gender);
        }
        if !self.bodywear.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bodywear);
        }
        if !self.footwear.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.footwear);
        }
        if !self.handwear.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.handwear);
        }
        if !self.headwear.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.headwear);
        }
        if !self.legwear.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.legwear);
        }
        if !self.weapon.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.weapon);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.gender != super::gender::Gender::GENDER_NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.gender))?;
        }
        if !self.bodywear.is_empty() {
            os.write_string(3, &self.bodywear)?;
        }
        if !self.footwear.is_empty() {
            os.write_string(4, &self.footwear)?;
        }
        if !self.handwear.is_empty() {
            os.write_string(5, &self.handwear)?;
        }
        if !self.headwear.is_empty() {
            os.write_string(6, &self.headwear)?;
        }
        if !self.legwear.is_empty() {
            os.write_string(7, &self.legwear)?;
        }
        if !self.weapon.is_empty() {
            os.write_string(8, &self.weapon)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Opponent {
        Opponent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Opponent| { &m.name },
                |m: &mut Opponent| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::gender::Gender>>(
                "gender",
                |m: &Opponent| { &m.gender },
                |m: &mut Opponent| { &mut m.gender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bodywear",
                |m: &Opponent| { &m.bodywear },
                |m: &mut Opponent| { &mut m.bodywear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "footwear",
                |m: &Opponent| { &m.footwear },
                |m: &mut Opponent| { &mut m.footwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "handwear",
                |m: &Opponent| { &m.handwear },
                |m: &mut Opponent| { &mut m.handwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "headwear",
                |m: &Opponent| { &m.headwear },
                |m: &mut Opponent| { &mut m.headwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "legwear",
                |m: &Opponent| { &m.legwear },
                |m: &mut Opponent| { &mut m.legwear },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "weapon",
                |m: &Opponent| { &m.weapon },
                |m: &mut Opponent| { &mut m.weapon },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Opponent>(
                "Opponent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Opponent {
        static instance: ::protobuf::rt::LazyV2<Opponent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Opponent::new)
    }
}

impl ::protobuf::Clear for Opponent {
    fn clear(&mut self) {
        self.name.clear();
        self.gender = super::gender::Gender::GENDER_NONE;
        self.bodywear.clear();
        self.footwear.clear();
        self.handwear.clear();
        self.headwear.clear();
        self.legwear.clear();
        self.weapon.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Opponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Opponent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eopponent.proto\x1a\x0cgender.proto\"\xe1\x01\n\x08Opponent\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1f\n\x06gender\x18\x02\x20\
    \x01(\x0e2\x07.GenderR\x06gender\x12\x1a\n\x08bodywear\x18\x03\x20\x01(\
    \tR\x08bodywear\x12\x1a\n\x08footwear\x18\x04\x20\x01(\tR\x08footwear\
    \x12\x1a\n\x08handwear\x18\x05\x20\x01(\tR\x08handwear\x12\x1a\n\x08head\
    wear\x18\x06\x20\x01(\tR\x08headwear\x12\x18\n\x07legwear\x18\x07\x20\
    \x01(\tR\x07legwear\x12\x16\n\x06weapon\x18\x08\x20\x01(\tR\x06weaponb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
