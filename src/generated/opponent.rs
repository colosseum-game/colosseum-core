// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.14.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `opponent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct Opponent {
    // message fields
    pub name: ::std::string::String,
    pub gender: ::protobuf::ProtobufEnumOrUnknown<super::gender::Gender>,
    pub bodywear: ::std::string::String,
    pub footwear: ::std::string::String,
    pub handwear: ::std::string::String,
    pub headwear: ::std::string::String,
    pub legwear: ::std::string::String,
    pub weapon: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Opponent {
    fn default() -> &'a Opponent {
        <Opponent as ::protobuf::Message>::default_instance()
    }
}

impl Opponent {
    pub fn new() -> Opponent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &Opponent| { &m.name },
            |m: &mut Opponent| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gender",
            |m: &Opponent| { &m.gender },
            |m: &mut Opponent| { &mut m.gender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "bodywear",
            |m: &Opponent| { &m.bodywear },
            |m: &mut Opponent| { &mut m.bodywear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "footwear",
            |m: &Opponent| { &m.footwear },
            |m: &mut Opponent| { &mut m.footwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "handwear",
            |m: &Opponent| { &m.handwear },
            |m: &mut Opponent| { &mut m.handwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "headwear",
            |m: &Opponent| { &m.headwear },
            |m: &mut Opponent| { &mut m.headwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "legwear",
            |m: &Opponent| { &m.legwear },
            |m: &mut Opponent| { &mut m.legwear },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weapon",
            |m: &Opponent| { &m.weapon },
            |m: &mut Opponent| { &mut m.weapon },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Opponent>(
            "Opponent",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for Opponent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = is.read_string()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.gender = is.read_enum_or_unknown()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.bodywear = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.footwear = is.read_string()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.handwear = is.read_string()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.headwear = is.read_string()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.legwear = is.read_string()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.weapon = is.read_string()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.gender != ::protobuf::ProtobufEnumOrUnknown::new(super::gender::Gender::GENDER_NONE) {
            my_size += ::protobuf::rt::enum_or_unknown_size(2, self.gender);
        }
        if !self.bodywear.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bodywear);
        }
        if !self.footwear.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.footwear);
        }
        if !self.handwear.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.handwear);
        }
        if !self.headwear.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.headwear);
        }
        if !self.legwear.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.legwear);
        }
        if !self.weapon.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.weapon);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.gender != ::protobuf::ProtobufEnumOrUnknown::new(super::gender::Gender::GENDER_NONE) {
            os.write_enum(2, ::protobuf::ProtobufEnumOrUnknown::value(&self.gender))?;
        }
        if !self.bodywear.is_empty() {
            os.write_string(3, &self.bodywear)?;
        }
        if !self.footwear.is_empty() {
            os.write_string(4, &self.footwear)?;
        }
        if !self.handwear.is_empty() {
            os.write_string(5, &self.handwear)?;
        }
        if !self.headwear.is_empty() {
            os.write_string(6, &self.headwear)?;
        }
        if !self.legwear.is_empty() {
            os.write_string(7, &self.legwear)?;
        }
        if !self.weapon.is_empty() {
            os.write_string(8, &self.weapon)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Opponent {
        Opponent::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static Opponent {
        static instance: Opponent = Opponent {
            name: ::std::string::String::new(),
            gender: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            bodywear: ::std::string::String::new(),
            footwear: ::std::string::String::new(),
            handwear: ::std::string::String::new(),
            headwear: ::std::string::String::new(),
            legwear: ::std::string::String::new(),
            weapon: ::std::string::String::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Opponent {
    fn clear(&mut self) {
        self.name.clear();
        self.gender = ::protobuf::ProtobufEnumOrUnknown::new(super::gender::Gender::GENDER_NONE);
        self.bodywear.clear();
        self.footwear.clear();
        self.handwear.clear();
        self.headwear.clear();
        self.legwear.clear();
        self.weapon.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Opponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Opponent {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eopponent.proto\x1a\x0cgender.proto\"\xe1\x01\n\x08Opponent\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1f\n\x06gender\x18\x02\x20\
    \x01(\x0e2\x07.GenderR\x06gender\x12\x1a\n\x08bodywear\x18\x03\x20\x01(\
    \tR\x08bodywear\x12\x1a\n\x08footwear\x18\x04\x20\x01(\tR\x08footwear\
    \x12\x1a\n\x08handwear\x18\x05\x20\x01(\tR\x08handwear\x12\x1a\n\x08head\
    wear\x18\x06\x20\x01(\tR\x08headwear\x12\x18\n\x07legwear\x18\x07\x20\
    \x01(\tR\x07legwear\x12\x16\n\x06weapon\x18\x08\x20\x01(\tR\x06weaponb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::gender::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(Opponent::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
