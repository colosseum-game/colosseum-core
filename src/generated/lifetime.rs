// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `lifetime.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Lifetime {
    // message fields
    pub lifetime_type: LifetimeType,
    pub lifetime_duration: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Lifetime {
    fn default() -> &'a Lifetime {
        <Lifetime as ::protobuf::Message>::default_instance()
    }
}

impl Lifetime {
    pub fn new() -> Lifetime {
        ::std::default::Default::default()
    }

    // .LifetimeType lifetime_type = 1;


    pub fn get_lifetime_type(&self) -> LifetimeType {
        self.lifetime_type
    }
    pub fn clear_lifetime_type(&mut self) {
        self.lifetime_type = LifetimeType::LIFETIME_TYPE_CONST;
    }

    // Param is passed by value, moved
    pub fn set_lifetime_type(&mut self, v: LifetimeType) {
        self.lifetime_type = v;
    }

    // uint32 lifetime_duration = 2;


    pub fn get_lifetime_duration(&self) -> u32 {
        self.lifetime_duration
    }
    pub fn clear_lifetime_duration(&mut self) {
        self.lifetime_duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_lifetime_duration(&mut self, v: u32) {
        self.lifetime_duration = v;
    }
}

impl ::protobuf::Message for Lifetime {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.lifetime_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lifetime_duration = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.lifetime_type != LifetimeType::LIFETIME_TYPE_CONST {
            my_size += ::protobuf::rt::enum_size(1, self.lifetime_type);
        }
        if self.lifetime_duration != 0 {
            my_size += ::protobuf::rt::value_size(2, self.lifetime_duration, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.lifetime_type != LifetimeType::LIFETIME_TYPE_CONST {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.lifetime_type))?;
        }
        if self.lifetime_duration != 0 {
            os.write_uint32(2, self.lifetime_duration)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Lifetime {
        Lifetime::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LifetimeType>>(
                "lifetime_type",
                |m: &Lifetime| { &m.lifetime_type },
                |m: &mut Lifetime| { &mut m.lifetime_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lifetime_duration",
                |m: &Lifetime| { &m.lifetime_duration },
                |m: &mut Lifetime| { &mut m.lifetime_duration },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Lifetime>(
                "Lifetime",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Lifetime {
        static instance: ::protobuf::rt::LazyV2<Lifetime> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Lifetime::new)
    }
}

impl ::protobuf::Clear for Lifetime {
    fn clear(&mut self) {
        self.lifetime_type = LifetimeType::LIFETIME_TYPE_CONST;
        self.lifetime_duration = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Lifetime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Lifetime {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LifetimeType {
    LIFETIME_TYPE_CONST = 0,
    LIFETIME_TYPE_ACTIVE = 1,
}

impl ::protobuf::ProtobufEnum for LifetimeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LifetimeType> {
        match value {
            0 => ::std::option::Option::Some(LifetimeType::LIFETIME_TYPE_CONST),
            1 => ::std::option::Option::Some(LifetimeType::LIFETIME_TYPE_ACTIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LifetimeType] = &[
            LifetimeType::LIFETIME_TYPE_CONST,
            LifetimeType::LIFETIME_TYPE_ACTIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LifetimeType>("LifetimeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LifetimeType {
}

impl ::std::default::Default for LifetimeType {
    fn default() -> Self {
        LifetimeType::LIFETIME_TYPE_CONST
    }
}

impl ::protobuf::reflect::ProtobufValue for LifetimeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0elifetime.proto\"k\n\x08Lifetime\x122\n\rlifetime_type\x18\x01\x20\
    \x01(\x0e2\r.LifetimeTypeR\x0clifetimeType\x12+\n\x11lifetime_duration\
    \x18\x02\x20\x01(\rR\x10lifetimeDuration*A\n\x0cLifetimeType\x12\x17\n\
    \x13LIFETIME_TYPE_CONST\x10\0\x12\x18\n\x14LIFETIME_TYPE_ACTIVE\x10\x01b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
