// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.14.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dot.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct DOT {
    // message fields
    pub aspect: ::protobuf::ProtobufEnumOrUnknown<super::aspect::Aspect>,
    pub damage_value: u32,
    // message oneof groups
    pub lifetime: ::std::option::Option<dot::Lifetime>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a DOT {
    fn default() -> &'a DOT {
        <DOT as ::protobuf::Message>::default_instance()
    }
}

impl DOT {
    pub fn new() -> DOT {
        ::std::default::Default::default()
    }

    // uint32 lifetime_duration = 3;

    pub fn get_lifetime_duration(&self) -> u32 {
        match self.lifetime {
            ::std::option::Option::Some(dot::Lifetime::lifetime_duration(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_lifetime_duration(&mut self) {
        self.lifetime = ::std::option::Option::None;
    }

    pub fn has_lifetime_duration(&self) -> bool {
        match self.lifetime {
            ::std::option::Option::Some(dot::Lifetime::lifetime_duration(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lifetime_duration(&mut self, v: u32) {
        self.lifetime = ::std::option::Option::Some(dot::Lifetime::lifetime_duration(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "aspect",
            |m: &DOT| { &m.aspect },
            |m: &mut DOT| { &mut m.aspect },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "damage_value",
            |m: &DOT| { &m.damage_value },
            |m: &mut DOT| { &mut m.damage_value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "lifetime_duration",
            DOT::has_lifetime_duration,
            DOT::get_lifetime_duration,
            DOT::set_lifetime_duration,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DOT>(
            "DOT",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for DOT {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.aspect = is.read_enum_or_unknown()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.damage_value = is.read_uint32()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.lifetime = ::std::option::Option::Some(dot::Lifetime::lifetime_duration(is.read_uint32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.aspect != ::protobuf::ProtobufEnumOrUnknown::new(super::aspect::Aspect::ASPECT_NONE) {
            my_size += ::protobuf::rt::enum_or_unknown_size(1, self.aspect);
        }
        if self.damage_value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.damage_value, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.lifetime {
            match v {
                &dot::Lifetime::lifetime_duration(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.aspect != ::protobuf::ProtobufEnumOrUnknown::new(super::aspect::Aspect::ASPECT_NONE) {
            os.write_enum(1, ::protobuf::ProtobufEnumOrUnknown::value(&self.aspect))?;
        }
        if self.damage_value != 0 {
            os.write_uint32(2, self.damage_value)?;
        }
        if let ::std::option::Option::Some(ref v) = self.lifetime {
            match v {
                &dot::Lifetime::lifetime_duration(v) => {
                    os.write_uint32(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> DOT {
        DOT::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static DOT {
        static instance: DOT = DOT {
            aspect: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            damage_value: 0,
            lifetime: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for DOT {
    fn clear(&mut self) {
        self.aspect = ::protobuf::ProtobufEnumOrUnknown::new(super::aspect::Aspect::ASPECT_NONE);
        self.damage_value = 0;
        self.lifetime = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DOT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DOT {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `DOT`
pub mod dot {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Lifetime {
        lifetime_duration(u32),
    }

    impl ::protobuf::Oneof for Lifetime {
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tdot.proto\x1a\x0caspect.proto\"\x84\x01\n\x03DOT\x12\x1f\n\x06aspect\
    \x18\x01\x20\x01(\x0e2\x07.AspectR\x06aspect\x12!\n\x0cdamage_value\x18\
    \x02\x20\x01(\rR\x0bdamageValue\x12-\n\x11lifetime_duration\x18\x03\x20\
    \x01(\rH\0R\x10lifetimeDurationB\n\n\x08lifetimeb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::aspect::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(DOT::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
