// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `legwear.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Legwear {
    // message fields
    pub display_name: ::std::string::String,
    pub description: ::std::string::String,
    pub fire_defense: u32,
    pub frost_defense: u32,
    pub lightning_defense: u32,
    pub physical_defense: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Legwear {
    fn default() -> &'a Legwear {
        <Legwear as ::protobuf::Message>::default_instance()
    }
}

impl Legwear {
    pub fn new() -> Legwear {
        ::std::default::Default::default()
    }

    // string display_name = 1;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // uint32 fire_defense = 3;


    pub fn get_fire_defense(&self) -> u32 {
        self.fire_defense
    }
    pub fn clear_fire_defense(&mut self) {
        self.fire_defense = 0;
    }

    // Param is passed by value, moved
    pub fn set_fire_defense(&mut self, v: u32) {
        self.fire_defense = v;
    }

    // uint32 frost_defense = 4;


    pub fn get_frost_defense(&self) -> u32 {
        self.frost_defense
    }
    pub fn clear_frost_defense(&mut self) {
        self.frost_defense = 0;
    }

    // Param is passed by value, moved
    pub fn set_frost_defense(&mut self, v: u32) {
        self.frost_defense = v;
    }

    // uint32 lightning_defense = 5;


    pub fn get_lightning_defense(&self) -> u32 {
        self.lightning_defense
    }
    pub fn clear_lightning_defense(&mut self) {
        self.lightning_defense = 0;
    }

    // Param is passed by value, moved
    pub fn set_lightning_defense(&mut self, v: u32) {
        self.lightning_defense = v;
    }

    // uint32 physical_defense = 6;


    pub fn get_physical_defense(&self) -> u32 {
        self.physical_defense
    }
    pub fn clear_physical_defense(&mut self) {
        self.physical_defense = 0;
    }

    // Param is passed by value, moved
    pub fn set_physical_defense(&mut self, v: u32) {
        self.physical_defense = v;
    }
}

impl ::protobuf::Message for Legwear {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.fire_defense = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frost_defense = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lightning_defense = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.physical_defense = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.display_name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if self.fire_defense != 0 {
            my_size += ::protobuf::rt::value_size(3, self.fire_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frost_defense != 0 {
            my_size += ::protobuf::rt::value_size(4, self.frost_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lightning_defense != 0 {
            my_size += ::protobuf::rt::value_size(5, self.lightning_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.physical_defense != 0 {
            my_size += ::protobuf::rt::value_size(6, self.physical_defense, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.display_name.is_empty() {
            os.write_string(1, &self.display_name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if self.fire_defense != 0 {
            os.write_uint32(3, self.fire_defense)?;
        }
        if self.frost_defense != 0 {
            os.write_uint32(4, self.frost_defense)?;
        }
        if self.lightning_defense != 0 {
            os.write_uint32(5, self.lightning_defense)?;
        }
        if self.physical_defense != 0 {
            os.write_uint32(6, self.physical_defense)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Legwear {
        Legwear::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "display_name",
                |m: &Legwear| { &m.display_name },
                |m: &mut Legwear| { &mut m.display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Legwear| { &m.description },
                |m: &mut Legwear| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "fire_defense",
                |m: &Legwear| { &m.fire_defense },
                |m: &mut Legwear| { &mut m.fire_defense },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "frost_defense",
                |m: &Legwear| { &m.frost_defense },
                |m: &mut Legwear| { &mut m.frost_defense },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lightning_defense",
                |m: &Legwear| { &m.lightning_defense },
                |m: &mut Legwear| { &mut m.lightning_defense },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "physical_defense",
                |m: &Legwear| { &m.physical_defense },
                |m: &mut Legwear| { &mut m.physical_defense },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Legwear>(
                "Legwear",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Legwear {
        static instance: ::protobuf::rt::LazyV2<Legwear> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Legwear::new)
    }
}

impl ::protobuf::Clear for Legwear {
    fn clear(&mut self) {
        self.display_name.clear();
        self.description.clear();
        self.fire_defense = 0;
        self.frost_defense = 0;
        self.lightning_defense = 0;
        self.physical_defense = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Legwear {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Legwear {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rlegwear.proto\"\xee\x01\n\x07Legwear\x12!\n\x0cdisplay_name\x18\x01\
    \x20\x01(\tR\x0bdisplayName\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\
    \x0bdescription\x12!\n\x0cfire_defense\x18\x03\x20\x01(\rR\x0bfireDefens\
    e\x12#\n\rfrost_defense\x18\x04\x20\x01(\rR\x0cfrostDefense\x12+\n\x11li\
    ghtning_defense\x18\x05\x20\x01(\rR\x10lightningDefense\x12)\n\x10physic\
    al_defense\x18\x06\x20\x01(\rR\x0fphysicalDefenseb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
