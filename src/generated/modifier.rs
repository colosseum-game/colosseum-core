// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc 3.14.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `modifier.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct Modifier {
    // message oneof groups
    pub expression: ::std::option::Option<modifier::Expression>,
    pub lifetime: ::std::option::Option<modifier::Lifetime>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a Modifier {
    fn default() -> &'a Modifier {
        <Modifier as ::protobuf::Message>::default_instance()
    }
}

impl Modifier {
    pub fn new() -> Modifier {
        ::std::default::Default::default()
    }

    // uint32 add = 1;

    pub fn get_add(&self) -> u32 {
        match self.expression {
            ::std::option::Option::Some(modifier::Expression::add(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_add(&mut self) {
        self.expression = ::std::option::Option::None;
    }

    pub fn has_add(&self) -> bool {
        match self.expression {
            ::std::option::Option::Some(modifier::Expression::add(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add(&mut self, v: u32) {
        self.expression = ::std::option::Option::Some(modifier::Expression::add(v))
    }

    // uint32 subtract = 2;

    pub fn get_subtract(&self) -> u32 {
        match self.expression {
            ::std::option::Option::Some(modifier::Expression::subtract(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_subtract(&mut self) {
        self.expression = ::std::option::Option::None;
    }

    pub fn has_subtract(&self) -> bool {
        match self.expression {
            ::std::option::Option::Some(modifier::Expression::subtract(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_subtract(&mut self, v: u32) {
        self.expression = ::std::option::Option::Some(modifier::Expression::subtract(v))
    }

    // .Fraction multiply = 3;

    pub fn get_multiply(&self) -> &super::fraction::Fraction {
        match self.expression {
            ::std::option::Option::Some(modifier::Expression::multiply(ref v)) => v,
            _ => <super::fraction::Fraction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_multiply(&mut self) {
        self.expression = ::std::option::Option::None;
    }

    pub fn has_multiply(&self) -> bool {
        match self.expression {
            ::std::option::Option::Some(modifier::Expression::multiply(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multiply(&mut self, v: super::fraction::Fraction) {
        self.expression = ::std::option::Option::Some(modifier::Expression::multiply(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multiply(&mut self) -> &mut super::fraction::Fraction {
        if let ::std::option::Option::Some(modifier::Expression::multiply(_)) = self.expression {
        } else {
            self.expression = ::std::option::Option::Some(modifier::Expression::multiply(super::fraction::Fraction::new()));
        }
        match self.expression {
            ::std::option::Option::Some(modifier::Expression::multiply(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multiply(&mut self) -> super::fraction::Fraction {
        if self.has_multiply() {
            match self.expression.take() {
                ::std::option::Option::Some(modifier::Expression::multiply(v)) => v,
                _ => panic!(),
            }
        } else {
            super::fraction::Fraction::new()
        }
    }

    // uint32 lifetime_duration = 4;

    pub fn get_lifetime_duration(&self) -> u32 {
        match self.lifetime {
            ::std::option::Option::Some(modifier::Lifetime::lifetime_duration(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_lifetime_duration(&mut self) {
        self.lifetime = ::std::option::Option::None;
    }

    pub fn has_lifetime_duration(&self) -> bool {
        match self.lifetime {
            ::std::option::Option::Some(modifier::Lifetime::lifetime_duration(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lifetime_duration(&mut self, v: u32) {
        self.lifetime = ::std::option::Option::Some(modifier::Lifetime::lifetime_duration(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "add",
            Modifier::has_add,
            Modifier::get_add,
            Modifier::set_add,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "subtract",
            Modifier::has_subtract,
            Modifier::get_subtract,
            Modifier::set_subtract,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::fraction::Fraction>(
            "multiply",
            Modifier::has_multiply,
            Modifier::get_multiply,
            Modifier::mut_multiply,
            Modifier::set_multiply,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "lifetime_duration",
            Modifier::has_lifetime_duration,
            Modifier::get_lifetime_duration,
            Modifier::set_lifetime_duration,
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Modifier>(
            "Modifier",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for Modifier {
    fn is_initialized(&self) -> bool {
        if let Some(modifier::Expression::multiply(ref v)) = self.expression {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expression = ::std::option::Option::Some(modifier::Expression::add(is.read_uint32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expression = ::std::option::Option::Some(modifier::Expression::subtract(is.read_uint32()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expression = ::std::option::Option::Some(modifier::Expression::multiply(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.lifetime = ::std::option::Option::Some(modifier::Lifetime::lifetime_duration(is.read_uint32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.expression {
            match v {
                &modifier::Expression::add(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &modifier::Expression::subtract(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &modifier::Expression::multiply(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.lifetime {
            match v {
                &modifier::Lifetime::lifetime_duration(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.expression {
            match v {
                &modifier::Expression::add(v) => {
                    os.write_uint32(1, v)?;
                },
                &modifier::Expression::subtract(v) => {
                    os.write_uint32(2, v)?;
                },
                &modifier::Expression::multiply(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.lifetime {
            match v {
                &modifier::Lifetime::lifetime_duration(v) => {
                    os.write_uint32(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> Modifier {
        Modifier::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static Modifier {
        static instance: Modifier = Modifier {
            expression: ::std::option::Option::None,
            lifetime: ::std::option::Option::None,
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for Modifier {
    fn clear(&mut self) {
        self.expression = ::std::option::Option::None;
        self.expression = ::std::option::Option::None;
        self.expression = ::std::option::Option::None;
        self.lifetime = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Modifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Modifier {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Modifier`
pub mod modifier {

    #[derive(Clone,PartialEq,Debug)]
    pub enum Expression {
        add(u32),
        subtract(u32),
        multiply(super::super::fraction::Fraction),
    }

    impl ::protobuf::Oneof for Expression {
    }

    #[derive(Clone,PartialEq,Debug)]
    pub enum Lifetime {
        lifetime_duration(u32),
    }

    impl ::protobuf::Oneof for Lifetime {
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emodifier.proto\x1a\x0efraction.proto\x1a\x1egoogle/protobuf/wrappe\
    rs.proto\"\xae\x01\n\x08Modifier\x12\x12\n\x03add\x18\x01\x20\x01(\rH\0R\
    \x03add\x12\x1c\n\x08subtract\x18\x02\x20\x01(\rH\0R\x08subtract\x12'\n\
    \x08multiply\x18\x03\x20\x01(\x0b2\t.FractionH\0R\x08multiply\x12-\n\x11\
    lifetime_duration\x18\x04\x20\x01(\rH\x01R\x10lifetimeDurationB\x0c\n\ne\
    xpressionB\n\n\x08lifetimeb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::fraction::file_descriptor());
        deps.push(::protobuf::well_known_types::file_descriptors::wrappers());
        let mut messages = ::std::vec::Vec::new();
        messages.push(Modifier::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
